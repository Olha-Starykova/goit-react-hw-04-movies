{"version":3,"sources":["views/MoviesPage.js"],"names":["MoviesPage","state","lists","query","handleChange","e","setState","currentTarget","value","handleSubmit","props","history","location","axios","get","then","response","data","results","push","pathname","search","this","undefined","split","onSubmit","preventDefault","type","onChange","map","list","to","id","from","title","Component"],"mappings":"0NAMMA,E,4MACFC,MAAQ,CACJC,MAAO,GACPC,MAAO,I,EAIXC,aAAe,SAACC,GACT,EAAKC,SAAS,CAACH,MAAOE,EAAEE,cAAcC,S,EAG7CC,aAAe,SAACN,GAAW,IAAD,EACQ,EAAKO,MAA3BC,EADc,EACdA,QAASC,EADK,EACLA,SAChBT,GAIDU,IAAMC,IAAN,mGAAsGX,IACjGY,MAAK,SAAAC,GAEF,EAAKV,SAAS,CAAEJ,MAAOc,EAASC,KAAKC,QAASf,MAAO,KACrDQ,EAAQQ,KAAK,CACTC,SAAUR,EAASQ,SACnBC,OAAO,SAAD,OAAWlB,S,uDAQnC,WAAqB,IACTkB,EAAWC,KAAKZ,MAAME,SAAtBS,OACElB,EAAUmB,KAAKrB,MAAfE,MAMZmB,KAAKb,kBACsBc,IAAzBF,EAAOG,MAAM,KAAK,GAEdrB,EACAkB,EAAOG,MAAM,KAAK,M,oBAK3B,WAAU,IAAD,SAEoBF,KAAKrB,MAAtBE,EAFH,EAEGA,MAAOD,EAFV,EAEUA,MACPU,EAAaU,KAAKZ,MAAlBE,SAGR,OACI,qCAEI,uBAAMa,SAAU,SAACpB,GACbA,EAAEqB,iBACF,EAAKjB,aAAaN,IAFtB,UAKI,uBACIwB,KAAK,OACLnB,MAAOL,EACPyB,SAAUN,KAAKlB,eAEnB,wBAAQuB,KAAK,SAAb,qDAEJ,6BACKzB,EAAM2B,KAAI,SAACC,GAAD,OACV,6BACG,cAAC,IAAD,CAAMC,GAAI,CACNX,SAAS,WAAD,OAAaU,EAAKE,IAC1B/B,MAAO,CAAEgC,KAAMrB,IAFnB,SAIKkB,EAAKI,SALJJ,EAAKE,gB,GAvEPG,aAuFVnC","file":"static/js/movies-page.48cfecf1.chunk.js","sourcesContent":["//import React from 'react';\r\nimport React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass MoviesPage extends Component  {\r\n    state = {\r\n        lists: [],\r\n        query: '',\r\n    }\r\n  \r\n    \r\n    handleChange = (e) => {\r\n           this.setState({query: e.currentTarget.value})\r\n    }\r\n    \r\n    handleSubmit = (query) => {\r\n        const { history, location } = this.props;\r\n    if (!query) {\r\n      return;\r\n    } // дописал это условие чтобы не отправляло сабмит с пустой строкой\r\n\r\n        axios.get(`https://api.themoviedb.org/3/search/movie?api_key=8d4e0a5a0c37d4780eefdf617d0feea1&query=${query}`)\r\n            .then(response => {\r\n                //  console.log(response.data.results)\r\n                this.setState({ lists: response.data.results, query: '' })\r\n                history.push({\r\n                    pathname: location.pathname,\r\n                    search: `query=${query}`,\r\n                });\r\n                // console.log(\"MoviesPage\", location);\r\n            });\r\n    };\r\n\r\n\r\n      // когда компонент маунтится - мы отправляем еще один сабмит за предыдущей пачкой фильмов\r\n  componentDidMount() {\r\n      const { search } = this.props.location\r\n        const { query } = this.state\r\n    //  деструктуризацияю делать не стал, подумал что так понятнее будет что и откуда берется\r\n    // ну а вы уже сделаете деструктуризацию\r\n   // console.log(search.split(\"=\")[1]); // тут я просто распарсил search для того чтобы передавать название фильма\r\n    // без &query= это можно сделать и другими способами, например сохранить\r\n    // название фильма в state и потом оттуда подтягивать\r\n    this.handleSubmit(\r\n      search.split(\"=\")[1] === undefined // тут если у нас есть значение из location.search тогда его подтягиваем\r\n        ? // а если нет, тогда query из стейта\r\n          query\r\n        : search.split(\"=\")[1]\r\n    );\r\n  }\r\n\r\n      \r\n render() {\r\n        \r\n     const { query, lists } = this.state;\r\n     const { location } = this.props;\r\n \r\n     \r\n     return (\r\n         <>\r\n                            \r\n             <form onSubmit={(e) => {\r\n                 e.preventDefault();\r\n                 this.handleSubmit(query)\r\n             }}\r\n             >\r\n                 <input\r\n                     type=\"text\"\r\n                     value={query}\r\n                     onChange={this.handleChange}\r\n                 />\r\n                 <button type=\"submit\">Искать</button>\r\n             </form>\r\n             <ul>\r\n                 {lists.map((list) =>\r\n                 (<li key={list.id} >\r\n                     <Link to={{\r\n                         pathname: `/movies/${list.id}`,\r\n                         state: { from: location },\r\n                     }} >\r\n                         {list.title}\r\n                     </Link>\r\n                 </li>))}\r\n \r\n             </ul>\r\n         </>\r\n     );\r\n    };\r\n };\r\n\r\n\r\nexport default MoviesPage;\r\n\r\n\r\n"],"sourceRoot":""}